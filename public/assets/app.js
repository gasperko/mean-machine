angular.module("app",["ngRoute","ui.router"]),angular.module("app").controller("errorCtrl",["$scope","$rootScope",function(e,t){e.hello="this is from the controller hello",console.log(e.hello)}]),angular.module("app").controller("homeCtrl",["$scope","$http","prognitor",function(e,t,o){e.apiUri="/api/data",o.run(e),e.setup(function(e){console.log(e)})}]),angular.module("app").controller("loginCtrl",["$scope","auth","$location","$timeout",function(e,t,o,n){e.authFail=!1,e.login=function(o,l){t.login(o,l).then(function(e){t.storeToken(e.data,function(){t.getUser().then(function(e){t.postLoginOps(e.data,function(){t.postLoginRouteHandler()})})})})["catch"](function(t){console.error("Gists error",t.status,t.data),401==t.status&&(e.authFail=!0,n(function(){e.authFail=!1},3e3))})["finally"](function(){console.log("finally finished gists")})}}]),angular.module("app").controller("masterCtrl",["$scope","$rootScope","$route","$http",function(e,t,o,n){console.log("masterCtrl"),localStorage.getItem("logged_user")&&(t.currentUser=localStorage.getItem("logged_user"),n.defaults.headers.common["x-auth"]=localStorage.getItem("user_token"),console.log(localStorage.getItem("user_token"))),e.$on("login",function(o,n){console.log("Logged In"),e.currentUser=n,t.currentUser=n,localStorage.setItem("logged_user",t.currentUser.username)})}]),angular.module("app").controller("navCtrl",["$scope","auth","$location",function(e,t,o){e.logout=function(){t.logout()}}]),angular.module("app").controller("newDataCtrl",["$scope","$http","$location",function(e,t,o){e.saveData=function(){console.log("save"),t.post("/api/data",{field1:e.field1,field2:e.field2,field3:e.field3,field4:e.field4}).then(function(e){console.log(e)},function(e){console.log(e)})}}]),angular.module("app").controller("registerCtrl",["$scope","auth","$location",function(e,t,o){e.register=function(n,l,r){t.register(n,l,r).then(function(n){t.login(l,r),e.$emit("login",n.data),o.path("/home")})["catch"](function(e){console.log(e)})}}]),angular.module("app").config(["$stateProvider","$urlRouterProvider","$locationProvider",function(e,t,o){t.otherwise("/"),e.state("app",{url:"/",views:{header:{templateUrl:"/nav.html",controller:"navCtrl"},content:{templateUrl:"/login.html",controller:"loginCtrl"}}}).state("app.login",{url:"login",views:{header:{templateUrl:"/nav.html",controller:"navCtrl"},content:{templateUrl:"/login.html",controller:"loginCtrl"}}}).state("app.register",{url:"register",views:{"content@":{templateUrl:"register.html",controller:"registerCtrl"}}}).state("app.validate",{url:"signup/validate/:id",views:{"content@":{templateUrl:"users/validate.html",controller:"validateCtrl"}}}).state("app.home",{url:"home",views:{"content@":{templateUrl:"users/home.html",controller:"homeCtrl"}}}).state("app.home.data",{url:"/data/new",views:{"content@":{templateUrl:"users/newData.html",controller:"newDataCtrl"}}}).state("app.home.details",{url:"/vehicles/:id",views:{"content@":{templateUrl:"vehicles/editVehicle.html",controller:"VehiclesEditInfoCtrl"}}}).state("app.home.map",{url:"/vehicles/map/:id",views:{"content@":{templateUrl:"vehicles/mapVehicle.html",controller:"VehiclesEditMapCtrl"}}}),o.html5Mode(!0)}]),angular.module("app").controller("validateCtrl",["$scope","$http","$stateParams",function(e,t,o){e.loading=!0,t.get("api/users/validate/"+o.id).then(function(t){console.log(t),200==t.status?(e.verified=!0,e.loading=!1):(e.verified=!1,e.loading=!1)})}]),angular.module("app").service("auth",["$http","$window","$location","$rootScope",function(e,t,o,n){function l(){return e.get("api/users")}function r(t,o){return e.post("api/sessions",{username:t,password:o})}function a(t,o,n){return e.post("api/users",{name:t,username:o,password:n})}function i(){localStorage.removeItem("user_token"),localStorage.removeItem("logged_user"),delete e.defaults.headers.common["x-auth"],n.isLogged=!1,n.currentUser=null,o.path("/login")}function s(o,n){t.sessionStorage.user_token=o,localStorage.setItem("user_token",o),e.defaults.headers.common["x-auth"]=t.sessionStorage.user_token,n&&"function"==typeof n&&n()}function u(){}function c(e,t){n.currentUser=e.name,localStorage.setItem("logged_user",n.currentUser),n.isLogged=!0,t&&"function"==typeof t&&t()}function g(){n.intendedRoute?o.path(n.intendedRoute):o.path("/home")}return{getUser:l,login:r,register:a,logout:i,storeToken:s,isLogged:u,postLoginOps:c,postLoginRouteHandler:g}}]),angular.module("app").service("prognitor",["$http","$window","$location","$rootScope",function(e,t,o,n){return{setSetupProcess:function(t){t.loading=!1,console.log(t),t.setup=function(o){t.loading||(t.loading=!0,e.get(t.apiUri).then(function(e){console.log(e),void 0!==o&&o(e)},function(e){404==e.status&&n.$broadcast("render404")}))}},run:function(e){console.log("in prognitor service"),this.setSetupProcess(e)}}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
